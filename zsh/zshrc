#!/usr/bin/env zsh
# Zsh runcom file

#-------------------------------------------------------------------------------
# ~~~~~ Functions ~~~~~
#-------------------------------------------------------------------------------

# Source argument on the condition that it exists
function condsource() { if [ -e $1 ]; then source $1; fi }

function exists() {
    hash "$1" &> /dev/null
}

function e() {
    $EDITOR "${@:-.}"
}

function ez() {
    e "$(realpath $HOME/.zshrc)"
}

for script in "$HOME/dotfiles/shell-ext/"**/*.(zsh|sh); do
    source "$script"
done

#-------------------------------------------------------------------------------
# ~~~~~ Secrets ~~~~~
#-------------------------------------------------------------------------------

condsource "$HOME/secrets.sh"

#-------------------------------------------------------------------------------
# ~~~~~ ZSH Features ~~~~~
#-------------------------------------------------------------------------------

export ANTIGEN_HOME="$HOME/.antigen"
if [ -d $ANTIGEN_HOME ]; then
    source "$ANTIGEN_HOME/antigen.zsh"

    antigen use oh-my-zsh

    antigen bundle cargo
    antigen bundle gitignore
    antigen bundle pod
    antigen bundle vagrant
    antigen bundle xcode

    antigen bundle b4b4r07/enhancd

    antigen bundle zsh-users/zsh-autosuggestions
    antigen bundle zsh-users/zsh-completions
    antigen bundle zsh-users/zsh-syntax-highlighting

    antigen theme denysdovhan/spaceship-zsh-theme

    antigen apply
else
    condsource "$HOME/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    condsource "$HOME/zsh-autosuggestions/zsh-autosuggestions.zsh"
fi

#-------------------------------------------------------------------------------
# ~~~~~ Environment ~~~~~
#-------------------------------------------------------------------------------

export PATH="$HOME/bin:/usr/local/bin:$PATH"
export LANG=en_US.UTF-8

if exists rbenv; then
    export PATH="$HOME/.rbenv/shims:$PATH"
fi

if exists most; then
    export PAGER='most'
else
    # Man syntax highlighting
    man() {
        env LESS_TERMCAP_mb=$'\e[1;31m' LESS_TERMCAP_md=$'\e[1;31m' LESS_TERMCAP_me=$'\e[0m' \
            LESS_TERMCAP_se=$'\e[0m' LESS_TERMCAP_so=$'\e[1;44;33m' LESS_TERMCAP_ue=$'\e[0m' \
            LESS_TERMCAP_us=$'\e[1;32m' \
        man "$@"
    }
fi

DOTFILES=$(realpath $(dirname $(realpath ~/.zshrc))/..)
if [[ $DOTFILES == *dotfiles ]]; then
    export PATH="$DOTFILES/bin:$PATH"
fi

#-------------------------------------------------------------------------------
# ~~~~~ Aliases ~~~~~
#-------------------------------------------------------------------------------

alias ls='ls --color=always'
alias please='sudo $(fc -ln -1)'
alias netup='sudo ifconfig en0 up'
alias netdown='sudo ifconfig en0 down'
alias reload='source ~/.zshrc'

if exists exa; then
    alias a='exa -a'
else
    alias a='ls -A'
fi

#-------------------------------------------------------------------------------
# ~~~~~ Languages & Tools ~~~~~
#-------------------------------------------------------------------------------

# Rust
export PATH="$PATH:$HOME/.cargo/bin"
if exists rustc; then
    export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
fi

# Go
export GOPATH="$HOME/go"
export PATH="$PATH:$GOPATH/bin:/usr/local/opt/go/libexec/bin"

## Go package manager
condsource ~/.gvm/scripts/gvm

# Haskell
export PATH="$HOME/Library/Haskell/bin:$PATH"

# Node
NVM_SCRIPT="/usr/local/opt/nvm/nvm.sh"
export NVM_DIR="$HOME/.nvm"
if [ -f "$NVM_SCRIPT" ]; then
    . "$NVM_SCRIPT"
fi

# Swift
if exists swiftenv; then eval "$(swiftenv init -)"; fi

# Git subrepo https://github.com/ingydotnet/git-subrepo
condsource "$HOME/git-subrepo/.rc"

# Nix package manager https://nixos.org/nix/
condsource "$HOME/.nix-profile/etc/profile.d/nix.sh"

#-------------------------------------------------------------------------------
# ~~~~~ OS-Specific ~~~~~
#-------------------------------------------------------------------------------
UNAME=`uname`

if [[ "$UNAME" == "Darwin" ]]; then

    # Add coreutils to PATH
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"

    # Set editor to Visual Studio Code
    if exists code; then export EDITOR='code'; fi

    # brew cask options
    export HOMEBREW_CASK_OPTS="--appdir=/Applications"

    # Android Studio
    export ANDROID_HOME=/usr/local/opt/android-sdk
    export STUDIO_JDK=/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk

    function finderdefaults() {
        defaults write com.apple.finder $1 $2 && killall Finder
    }

    # Python script to join PDFs
    alias joinpdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

    # Show/hide desktop
    alias showdesktop='finderdefaults CreateDesktop true'
    alias hidedesktop='finderdefaults CreateDesktop false'

    # Show/hide hidden files
    alias showfiles='finderdefaults AppleShowAllFiles true'
    alias hidefiles='finderdefaults AppleShowAllFiles false'

    # Remove all '.DS_Store' files in the current directory
    alias rmds='find . -name ".DS_Store" -delete'

    # App shortcuts
    alias firefox='open -a "Firefox"'
    alias chrome='open -a "Google Chrome"'
    alias safari='open -a "Safari"'
    alias xcode='open -a "Xcode"'

    # Current date for sparkle appcast
    alias appcastdate='date --rfc-2822'

elif [[ "$UNAME" == "Linux" ]]; then
    if [[ "$(cat /proc/sys/kernel/osrelease)" =~ .*Microsoft.* ]]; then

        # Run windows command using cmd.exe
        alias wcmd='/mnt/c/Windows/System32/cmd.exe /C'

        # VS Code
        alias code='wcmd code'

    else
        alias screenfetch='screenfetch -st'
    fi
fi
